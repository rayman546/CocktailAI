version: '3.8'

services:
  # Database
  db:
    image: postgres:14-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - .env
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Redis for Celery
  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build: ./backend
    volumes:
      - ./backend:/app
      - static_volume:/app/static
      - media_volume:/app/media
    ports:
      - "8000:8000"
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             python manage.py runserver 0.0.0.0:8000"

  # Celery Worker
  celery:
    build: ./backend
    volumes:
      - ./backend:/app
    env_file:
      - .env
    depends_on:
      backend:
        condition: service_started
      redis:
        condition: service_healthy
    command: celery -A cocktailai_backend worker -l info

  # Celery Beat for scheduled tasks
  celery-beat:
    build: ./backend
    volumes:
      - ./backend:/app
    env_file:
      - .env
    depends_on:
      backend:
        condition: service_started
      redis:
        condition: service_healthy
    command: celery -A cocktailai_backend beat -l info

  # Frontend
  frontend:
    build: ./frontend
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    env_file:
      - .env
    depends_on:
      - backend
    command: npm run dev

  # Nginx for serving frontend and proxy API requests
  nginx:
    build: ./nginx
    ports:
      - "80:80"
    volumes:
      - static_volume:/static
      - media_volume:/media
      - ./nginx/conf:/etc/nginx/conf.d
    depends_on:
      - backend
      - frontend

volumes:
  postgres_data:
  static_volume:
  media_volume: 